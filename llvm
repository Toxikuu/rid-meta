#!/bin/bash
NAME="llvm"
VERS="19.1.6" # untested
ver="${VERS%.*.*}"
LINK="https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERS/llvm-$VERS.src.tar.xz"
DOWN="https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-cmake-$ver.src.tar.xz 		\
      https://anduin.linuxfromscratch.org/BLFS/llvm/llvm-third-party-$ver.src.tar.xz	\
      https://github.com/llvm/llvm-project/releases/download/llvmorg-$VERS/clang-$VERS.src.tar.xz"
UPST="https://github.com/llvm/llvm-project.git"
VCMD="git ls-remote --tags '$UPST' | sed 's:.*/::' | sort -V | tail -n3 | head -n1 | cut -d- -f2"
SELE="h1.d-inline"
DEPS="cmake"


idir() {

tar -xf "$RIDSOURCES"/llvm-cmake-$ver.src.tar.xz
tar -xf "$RIDSOURCES"/llvm-third-party-$ver.src.tar.xz
sed "/LLVM_COMMON_CMAKE_UTILS/s@../cmake@llvm-cmake-${ver}.src@"          \
    -i CMakeLists.txt                                                  &&
sed "/LLVM_THIRD_PARTY_DIR/s@../third-party@llvm-third-party-${ver}.src@" \
    -i cmake/modules/HandleLLVMOptions.cmake

tar -xf "$RIDSOURCES"/clang-$VERS.src.tar.xz -C tools &&
mv tools/clang-$VERS.src tools/clang

grep -rl '#!.*python' | xargs sed -i '1s/python$/python3/'

mkdir -v build &&
cd       build &&

CC=gcc CXX=g++                                   \
cmake -D CMAKE_INSTALL_PREFIX=/usr               \
      -D CMAKE_SKIP_INSTALL_RPATH=ON             \
      -D LLVM_ENABLE_FFI=ON                      \
      -D CMAKE_BUILD_TYPE=Release                \
      -D LLVM_BUILD_LLVM_DYLIB=ON                \
      -D LLVM_LINK_LLVM_DYLIB=ON                 \
      -D LLVM_ENABLE_RTTI=ON                     \
      -D LLVM_TARGETS_TO_BUILD="X86;host"        \
      -D LLVM_BINUTILS_INCDIR=/usr/include       \
      -D LLVM_INCLUDE_BENCHMARKS=OFF             \
      -D CLANG_DEFAULT_PIE_ON_LINUX=ON           \
      -D CLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang \
      -W no-dev -G Ninja ..                     ||
die "Cmake failed"

ninja                                           ||
die "Ninja failed"
DESTDIR= ninja install &&
cp -v bin/FileCheck /usr/bin

rm -rf *

CC=gcc CXX=g++                                          \
cmake -D CMAKE_INSTALL_PREFIX=/usr                      \
      -D CMAKE_C_FLAGS:STRING=-m32                      \
      -D CMAKE_SKIP_INSTALL_RPATH=ON                    \
      -D CMAKE_CXX_FLAGS:STRING=-m32                    \
      -D LLVM_TARGET_ARCH:STRING=i686                   \
      -D LLVM_LIBDIR_SUFFIX=32                          \
      -D LLVM_ENABLE_FFI=ON                             \
      -D CMAKE_BUILD_TYPE=Release                       \
      -D LLVM_BUILD_LLVM_DYLIB=ON                       \
      -D LLVM_LINK_LLVM_DYLIB=ON                        \
      -D LLVM_ENABLE_RTTI=ON                            \
      -D LLVM_DEFAULT_TARGET_TRIPLE="i686-pc-linux-gnu" \
      -D LLVM_TARGETS_TO_BUILD="X86;host"               \
      -D LLVM_HOST_TRIPLE="x86_64-pc-linux-gnu"         \
      -D LLVM_BINUTILS_INCDIR=/usr/include              \
      -D LLVM_INCLUDE_BENCHMARKS=OFF                    \
      -D CLANG_DEFAULT_PIE_ON_LINUX=ON                  \
      -D CLANG_CONFIG_FILE_SYSTEM_DIR=/etc/clang        \
      -W no-dev -G Ninja ..                            ||
die "32-bit CMake failed"

ninja                                                  ||
die "32-bit ninja failed"
DESTDIR=/tmp/rid/dest ninja install
cp -vr /tmp/rid/dest/usr/lib32/* /usr/lib32
rm -rf /tmp/rid/dest
ldconfig

mkdir -pv /etc/clang &&
for i in clang clang++; do
  echo -fstack-protector-strong > /etc/clang/$i.cfg
done

}

rdir() {

echo not implemented

}
